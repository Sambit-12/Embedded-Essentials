
bin\Debug\302954_Embedded_Sambit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000060  00000000  00000000  00000329  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000b8  00000000  00000000  00000389  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000421  00000000  00000000  00000441  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000275  00000000  00000000  00000862  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000471  00000000  00000000  00000ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017e  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000118  00000000  00000000  00001176  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000128e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  78:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <InitUSART>:
// Source file for Output
#include "FinalOutput.h"
// Initialization for Output
void InitUSART(int baud_rate){
    uint16_t ubrr_value;
    ubrr_value= (16000000/(16*baud_rate)-1);
  80:	9c 01       	movw	r18, r24
  82:	22 95       	swap	r18
  84:	32 95       	swap	r19
  86:	30 7f       	andi	r19, 0xF0	; 240
  88:	32 27       	eor	r19, r18
  8a:	20 7f       	andi	r18, 0xF0	; 240
  8c:	32 27       	eor	r19, r18
  8e:	44 27       	eor	r20, r20
  90:	37 fd       	sbrc	r19, 7
  92:	40 95       	com	r20
  94:	54 2f       	mov	r21, r20
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	74 e2       	ldi	r23, 0x24	; 36
  9a:	84 ef       	ldi	r24, 0xF4	; 244
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 1a 01 	call	0x234	; 0x234 <__divmodsi4>
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	30 40       	sbci	r19, 0x00	; 0
    UBRR0L= ubrr_value;
  a6:	20 93 c4 00 	sts	0x00C4, r18
    UBRR0H = (ubrr_value>>8)&0x00ff;
  aa:	30 93 c5 00 	sts	0x00C5, r19
    UCSR0C= (1<<UMSEL00)|(1<UCSZ01)|(1<<UCSZ00);
  ae:	83 e4       	ldi	r24, 0x43	; 67
  b0:	80 93 c2 00 	sts	0x00C2, r24

    UCSR0B= (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
  b4:	88 ed       	ldi	r24, 0xD8	; 216
  b6:	80 93 c1 00 	sts	0x00C1, r24





}
  ba:	08 95       	ret

000000bc <USARTReadChar>:

// Receiver input
char USARTReadChar(){
    while(!(UCSR0A & (1<<RXC0)))
  bc:	80 91 c0 00 	lds	r24, 0x00C0
  c0:	87 ff       	sbrs	r24, 7
  c2:	fc cf       	rjmp	.-8      	; 0xbc <USARTReadChar>
    {

    }

    return UDR0;
  c4:	80 91 c6 00 	lds	r24, 0x00C6

}
  c8:	08 95       	ret

000000ca <USARTWriteChar>:

 // transmitter  output
void USARTWriteChar(uint8_t data){
  ca:	98 2f       	mov	r25, r24
    while(!(UCSR0A & (1<<UDRE0))){
  cc:	80 91 c0 00 	lds	r24, 0x00C0
  d0:	85 ff       	sbrs	r24, 5
  d2:	fc cf       	rjmp	.-8      	; 0xcc <USARTWriteChar+0x2>

    }
    UDR0 = data;
  d4:	90 93 c6 00 	sts	0x00C6, r25



}
  d8:	08 95       	ret

000000da <PWM>:
// Source file for input
#include "Input.h"
// Initializing PWM on D6 Pin
void PWM(){

    TCCR0A|=(1<<COM0A1)|(1<<WGM00)|(1<<WGM01);
  da:	84 b5       	in	r24, 0x24	; 36
  dc:	83 68       	ori	r24, 0x83	; 131
  de:	84 bd       	out	0x24, r24	; 36
    TCCR0B|= (1<<CS01)|(1<<CS00); //63 prescalar
  e0:	85 b5       	in	r24, 0x25	; 37
  e2:	83 60       	ori	r24, 0x03	; 3
  e4:	85 bd       	out	0x25, r24	; 37
    //TCCR0B|= (1<<CS01); //8 prescalar
    DDRD|=(1<<PD6);
  e6:	56 9a       	sbi	0x0a, 6	; 10

}
  e8:	08 95       	ret

000000ea <port>:

// Declaration of pin for input and output
void port(){
DDRB |=0b11111111; // for BCD to 7 segment converter
  ea:	84 b1       	in	r24, 0x04	; 4
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 b9       	out	0x04, r24	; 4
DDRD |=(1<<PD5);  // Output
  f0:	55 9a       	sbi	0x0a, 5	; 10
DDRD &= ~(1<<PD2); // Button Sensor
  f2:	52 98       	cbi	0x0a, 2	; 10
PORTD |= (1<<PD2); // set bit
  f4:	5a 9a       	sbi	0x0b, 2	; 11


}
  f6:	08 95       	ret

000000f8 <InitADC>:

// Declaration for ADC Converter
void InitADC(){
ADMUX = (1<<REFS0);
  f8:	80 e4       	ldi	r24, 0x40	; 64
  fa:	80 93 7c 00 	sts	0x007C, r24
//ADMUX = 0x40;
ADCSRA = (1<<ADEN)|(7<<ADPS0);
  fe:	87 e8       	ldi	r24, 0x87	; 135
 100:	80 93 7a 00 	sts	0x007A, r24
}
 104:	08 95       	ret

00000106 <ReadADC>:

// Program to read ADC Value
uint16_t ReadADC(uint8_t ch){
ADMUX&= 0xf8;
 106:	90 91 7c 00 	lds	r25, 0x007C
 10a:	98 7f       	andi	r25, 0xF8	; 248
 10c:	90 93 7c 00 	sts	0x007C, r25
ch= ch&0b00000111;
ADMUX|=ch;
 110:	90 91 7c 00 	lds	r25, 0x007C
 114:	87 70       	andi	r24, 0x07	; 7
 116:	89 2b       	or	r24, r25
 118:	80 93 7c 00 	sts	0x007C, r24
ADCSRA|=(1<<ADSC);
 11c:	80 91 7a 00 	lds	r24, 0x007A
 120:	80 64       	ori	r24, 0x40	; 64
 122:	80 93 7a 00 	sts	0x007A, r24

while(!(ADCSRA & (1<<ADIF)));
 126:	80 91 7a 00 	lds	r24, 0x007A
 12a:	84 ff       	sbrs	r24, 4
 12c:	fc cf       	rjmp	.-8      	; 0x126 <ReadADC+0x20>
ADCSRA|=(1<<ADIF);
 12e:	80 91 7a 00 	lds	r24, 0x007A
 132:	80 61       	ori	r24, 0x10	; 16
 134:	80 93 7a 00 	sts	0x007A, r24
return(ADC);
 138:	20 91 78 00 	lds	r18, 0x0078
 13c:	30 91 79 00 	lds	r19, 0x0079



}
 140:	c9 01       	movw	r24, r18
 142:	08 95       	ret

00000144 <main>:
#include "Input.h"
#include "FinalOutput.h"
#define baud_rate 9600

int main(void)
{   // port declaration
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
    port();
 152:	0e 94 75 00 	call	0xea	; 0xea <port>
    // ADC channel declaration
    InitADC();
 156:	0e 94 7c 00 	call	0xf8	; 0xf8 <InitADC>
    // PWM Channel Declaration
    PWM();
 15a:	0e 94 6d 00 	call	0xda	; 0xda <PWM>
    // Initializing Serial Communication
    InitUSART(baud_rate);
 15e:	80 e8       	ldi	r24, 0x80	; 128
 160:	95 e2       	ldi	r25, 0x25	; 37
 162:	0e 94 40 00 	call	0x80	; 0x80 <InitUSART>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 166:	c0 e9       	ldi	r28, 0x90	; 144
 168:	d1 e0       	ldi	r29, 0x01	; 1
                    OCR0A =190;
                    Temperature=29;

                }
                else{
                    OCR0A =250;
 16a:	0a ef       	ldi	r16, 0xFA	; 250
                    OCR0A =110;
                    Temperature=25;

                }
                else if(ADC_value<=700){
                    OCR0A =190;
 16c:	ee eb       	ldi	r30, 0xBE	; 190
 16e:	fe 2e       	mov	r15, r30
                    OCR0A =60;
                    Temperature=20;

                }
                else if(ADC_value<=500){
                    OCR0A =110;
 170:	7e e6       	ldi	r23, 0x6E	; 110
 172:	e7 2e       	mov	r14, r23
                //Reading ADC Value from C0 pin(Temperature Sensor)
                ADC_value = ReadADC(0);
                _delay_ms(20);
                // Checking for input from TempSensor
                if (ADC_value<=200){
                    OCR0A =60;
 174:	6c e3       	ldi	r22, 0x3C	; 60
 176:	d6 2e       	mov	r13, r22
    while(1){



            //Checking if person is sitting or not
            if ((!(PIND&(1<<PIND2)))){
 178:	4a 9b       	sbis	0x09, 2	; 9
 17a:	14 c0       	rjmp	.+40     	; 0x1a4 <main+0x60>


            }
            // If person is not sitting then turn off the heater
            else{
                PORTD &= ~(1<<PD5);
 17c:	5d 98       	cbi	0x0b, 5	; 11
                OCR0A =0;
 17e:	17 bc       	out	0x27, r1	; 39
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	10 e0       	ldi	r17, 0x00	; 0
            }


        // Sending Temperature data over Serial Port
        USARTWriteChar(Temperature);
 184:	84 2f       	mov	r24, r20
 186:	0e 94 65 00 	call	0xca	; 0xca <USARTWriteChar>
        // HEX to BCD Conversion
        Temperature+= (Temperature/10)*6;
        // 7 Segment display input
        PORTB = Temperature;
 18a:	15 b9       	out	0x05, r17	; 5
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	ce 01       	movw	r24, r28
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x4e>
 196:	2f 5f       	subi	r18, 0xFF	; 255
 198:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19a:	28 3c       	cpi	r18, 0xC8	; 200
 19c:	31 05       	cpc	r19, r1
 19e:	c1 f7       	brne	.-16     	; 0x190 <main+0x4c>
    while(1){



            //Checking if person is sitting or not
            if ((!(PIND&(1<<PIND2)))){
 1a0:	4a 99       	sbic	0x09, 2	; 9
 1a2:	ec cf       	rjmp	.-40     	; 0x17c <main+0x38>
                // Output Showing
                PORTD |=(1<<PD5);
 1a4:	5d 9a       	sbi	0x0b, 5	; 11

                //Reading ADC Value from C0 pin(Temperature Sensor)
                ADC_value = ReadADC(0);
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 83 00 	call	0x106	; 0x106 <ReadADC>
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	fe 01       	movw	r30, r28
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x6e>
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ba:	28 3c       	cpi	r18, 0xC8	; 200
 1bc:	31 05       	cpc	r19, r1
 1be:	c1 f7       	brne	.-16     	; 0x1b0 <main+0x6c>
                _delay_ms(20);
                // Checking for input from TempSensor
                if (ADC_value<=200){
 1c0:	89 3c       	cpi	r24, 0xC9	; 201
 1c2:	91 05       	cpc	r25, r1
 1c4:	d8 f4       	brcc	.+54     	; 0x1fc <main+0xb8>
                    OCR0A =60;
 1c6:	d7 bc       	out	0x27, r13	; 39
 1c8:	44 e1       	ldi	r20, 0x14	; 20
                    OCR0A =190;
                    Temperature=29;

                }
                else{
                    OCR0A =250;
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x8c>
 1d4:	2f 5f       	subi	r18, 0xFF	; 255
 1d6:	3f 4f       	sbci	r19, 0xFF	; 255
 1d8:	28 3c       	cpi	r18, 0xC8	; 200
 1da:	31 05       	cpc	r19, r1
 1dc:	c1 f7       	brne	.-16     	; 0x1ce <main+0x8a>
 1de:	84 2f       	mov	r24, r20
 1e0:	6a e0       	ldi	r22, 0x0A	; 10
 1e2:	0e 94 0e 01 	call	0x21c	; 0x21c <__udivmodqi4>
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	9c 01       	movw	r18, r24
 1ea:	22 0f       	add	r18, r18
 1ec:	33 1f       	adc	r19, r19
 1ee:	28 0f       	add	r18, r24
 1f0:	39 1f       	adc	r19, r25
 1f2:	22 0f       	add	r18, r18
 1f4:	33 1f       	adc	r19, r19
 1f6:	14 2f       	mov	r17, r20
 1f8:	12 0f       	add	r17, r18
 1fa:	c4 cf       	rjmp	.-120    	; 0x184 <main+0x40>
                if (ADC_value<=200){
                    OCR0A =60;
                    Temperature=20;

                }
                else if(ADC_value<=500){
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	85 3f       	cpi	r24, 0xF5	; 245
 200:	92 07       	cpc	r25, r18
 202:	18 f4       	brcc	.+6      	; 0x20a <main+0xc6>
                    OCR0A =110;
 204:	e7 bc       	out	0x27, r14	; 39
 206:	49 e1       	ldi	r20, 0x19	; 25
 208:	e0 cf       	rjmp	.-64     	; 0x1ca <main+0x86>
                    Temperature=25;

                }
                else if(ADC_value<=700){
 20a:	8d 5b       	subi	r24, 0xBD	; 189
 20c:	92 40       	sbci	r25, 0x02	; 2
 20e:	18 f4       	brcc	.+6      	; 0x216 <main+0xd2>
                    OCR0A =190;
 210:	f7 bc       	out	0x27, r15	; 39
 212:	4d e1       	ldi	r20, 0x1D	; 29
 214:	da cf       	rjmp	.-76     	; 0x1ca <main+0x86>
                    Temperature=29;

                }
                else{
                    OCR0A =250;
 216:	07 bd       	out	0x27, r16	; 39
 218:	41 e2       	ldi	r20, 0x21	; 33
 21a:	d7 cf       	rjmp	.-82     	; 0x1ca <main+0x86>

0000021c <__udivmodqi4>:
 21c:	99 1b       	sub	r25, r25
 21e:	79 e0       	ldi	r23, 0x09	; 9
 220:	04 c0       	rjmp	.+8      	; 0x22a <__udivmodqi4_ep>

00000222 <__udivmodqi4_loop>:
 222:	99 1f       	adc	r25, r25
 224:	96 17       	cp	r25, r22
 226:	08 f0       	brcs	.+2      	; 0x22a <__udivmodqi4_ep>
 228:	96 1b       	sub	r25, r22

0000022a <__udivmodqi4_ep>:
 22a:	88 1f       	adc	r24, r24
 22c:	7a 95       	dec	r23
 22e:	c9 f7       	brne	.-14     	; 0x222 <__udivmodqi4_loop>
 230:	80 95       	com	r24
 232:	08 95       	ret

00000234 <__divmodsi4>:
 234:	97 fb       	bst	r25, 7
 236:	09 2e       	mov	r0, r25
 238:	05 26       	eor	r0, r21
 23a:	0e d0       	rcall	.+28     	; 0x258 <__divmodsi4_neg1>
 23c:	57 fd       	sbrc	r21, 7
 23e:	04 d0       	rcall	.+8      	; 0x248 <__divmodsi4_neg2>
 240:	14 d0       	rcall	.+40     	; 0x26a <__udivmodsi4>
 242:	0a d0       	rcall	.+20     	; 0x258 <__divmodsi4_neg1>
 244:	00 1c       	adc	r0, r0
 246:	38 f4       	brcc	.+14     	; 0x256 <__divmodsi4_exit>

00000248 <__divmodsi4_neg2>:
 248:	50 95       	com	r21
 24a:	40 95       	com	r20
 24c:	30 95       	com	r19
 24e:	21 95       	neg	r18
 250:	3f 4f       	sbci	r19, 0xFF	; 255
 252:	4f 4f       	sbci	r20, 0xFF	; 255
 254:	5f 4f       	sbci	r21, 0xFF	; 255

00000256 <__divmodsi4_exit>:
 256:	08 95       	ret

00000258 <__divmodsi4_neg1>:
 258:	f6 f7       	brtc	.-4      	; 0x256 <__divmodsi4_exit>
 25a:	90 95       	com	r25
 25c:	80 95       	com	r24
 25e:	70 95       	com	r23
 260:	61 95       	neg	r22
 262:	7f 4f       	sbci	r23, 0xFF	; 255
 264:	8f 4f       	sbci	r24, 0xFF	; 255
 266:	9f 4f       	sbci	r25, 0xFF	; 255
 268:	08 95       	ret

0000026a <__udivmodsi4>:
 26a:	a1 e2       	ldi	r26, 0x21	; 33
 26c:	1a 2e       	mov	r1, r26
 26e:	aa 1b       	sub	r26, r26
 270:	bb 1b       	sub	r27, r27
 272:	fd 01       	movw	r30, r26
 274:	0d c0       	rjmp	.+26     	; 0x290 <__udivmodsi4_ep>

00000276 <__udivmodsi4_loop>:
 276:	aa 1f       	adc	r26, r26
 278:	bb 1f       	adc	r27, r27
 27a:	ee 1f       	adc	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	a2 17       	cp	r26, r18
 280:	b3 07       	cpc	r27, r19
 282:	e4 07       	cpc	r30, r20
 284:	f5 07       	cpc	r31, r21
 286:	20 f0       	brcs	.+8      	; 0x290 <__udivmodsi4_ep>
 288:	a2 1b       	sub	r26, r18
 28a:	b3 0b       	sbc	r27, r19
 28c:	e4 0b       	sbc	r30, r20
 28e:	f5 0b       	sbc	r31, r21

00000290 <__udivmodsi4_ep>:
 290:	66 1f       	adc	r22, r22
 292:	77 1f       	adc	r23, r23
 294:	88 1f       	adc	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	1a 94       	dec	r1
 29a:	69 f7       	brne	.-38     	; 0x276 <__udivmodsi4_loop>
 29c:	60 95       	com	r22
 29e:	70 95       	com	r23
 2a0:	80 95       	com	r24
 2a2:	90 95       	com	r25
 2a4:	9b 01       	movw	r18, r22
 2a6:	ac 01       	movw	r20, r24
 2a8:	bd 01       	movw	r22, r26
 2aa:	cf 01       	movw	r24, r30
 2ac:	08 95       	ret

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
