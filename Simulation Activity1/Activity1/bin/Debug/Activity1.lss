
bin\Debug\Activity1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000151  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000053  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000264  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000179  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000221  00000000  00000000  000005c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ec  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000040  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
/*
 */
#include "Project.h"
int main(void)
{
  port();
  80:	0e 94 65 00 	call	0xca	; 0xca <port>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  84:	40 e9       	ldi	r20, 0x90	; 144
  86:	51 e0       	ldi	r21, 0x01	; 1

    while(1)
        {

            if((!(PIND&(1<<PD4)))&(!(PIND&(1<<PD0))))
  88:	89 b1       	in	r24, 0x09	; 9
  8a:	99 b1       	in	r25, 0x09	; 9
  8c:	84 fd       	sbrc	r24, 4
  8e:	11 c0       	rjmp	.+34     	; 0xb2 <main+0x32>
  90:	90 fd       	sbrc	r25, 0
  92:	0f c0       	rjmp	.+30     	; 0xb2 <main+0x32>
               {
                   PORTD |=(1<<PD6); //Turn on Led
  94:	5e 9a       	sbi	0x0b, 6	; 11
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	ca 01       	movw	r24, r20
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <main+0x1c>
  a0:	2f 5f       	subi	r18, 0xFF	; 255
  a2:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a4:	28 3c       	cpi	r18, 0xC8	; 200
  a6:	31 05       	cpc	r19, r1
  a8:	c1 f7       	brne	.-16     	; 0x9a <main+0x1a>
  port();

    while(1)
        {

            if((!(PIND&(1<<PD4)))&(!(PIND&(1<<PD0))))
  aa:	89 b1       	in	r24, 0x09	; 9
  ac:	99 b1       	in	r25, 0x09	; 9
  ae:	84 ff       	sbrs	r24, 4
  b0:	ef cf       	rjmp	.-34     	; 0x90 <main+0x10>
                   PORTD |=(1<<PD6); //Turn on Led
                   _delay_ms(20);
               }
          else
          {
              PORTD &= ~(1<<PD6); //Turn of Led
  b2:	5e 98       	cbi	0x0b, 6	; 11
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	ca 01       	movw	r24, r20
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x3a>
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	28 3c       	cpi	r18, 0xC8	; 200
  c4:	31 05       	cpc	r19, r1
  c6:	c1 f7       	brne	.-16     	; 0xb8 <main+0x38>
  c8:	df cf       	rjmp	.-66     	; 0x88 <main+0x8>

000000ca <port>:
#include "Project.h"
void port()
{

DDRD |=(1<<PD6); // Led Output
  ca:	56 9a       	sbi	0x0a, 6	; 10
DDRD &=~(1<<PD4);// Input of the Heater
  cc:	54 98       	cbi	0x0a, 4	; 10
DDRD &=~(1<<PD0);// Input of seat Button
  ce:	50 98       	cbi	0x0a, 0	; 10

/* Enabling Pull ups at pin 0 and Pin 4 of Port D*/
PORTD |= (1<<PD4); //Setting up the Bit
  d0:	5c 9a       	sbi	0x0b, 4	; 11
PORTD |= (1<<PD0); //Setting up the Bit
  d2:	58 9a       	sbi	0x0b, 0	; 11
}
  d4:	08 95       	ret

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
