
bin\Debug\Activity2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000230  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000040  00000000  00000000  00000233  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007d  00000000  00000000  00000273  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000332  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f9  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000363  00000000  00000000  0000081b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000115  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a3  00000000  00000000  00000d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  88:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PWM>:
#include "Activity.h"
void PWM(){

    TCCR0A|=(1<<COM0A1)|(1<<WGM00)|(1<<WGM01);
  90:	84 b5       	in	r24, 0x24	; 36
  92:	83 68       	ori	r24, 0x83	; 131
  94:	84 bd       	out	0x24, r24	; 36
    TCCR0B|= (1<<CS01)|(1<<CS00); //64 prescalar
  96:	85 b5       	in	r24, 0x25	; 37
  98:	83 60       	ori	r24, 0x03	; 3
  9a:	85 bd       	out	0x25, r24	; 37
    //TCCR0B|= (1<<CS01); //8 prescalar
    DDRD|=(1<<PD6);
  9c:	56 9a       	sbi	0x0a, 6	; 10

}
  9e:	08 95       	ret

000000a0 <port>:
void port(){
DDRB |=(1<<PB7); // for led
  a0:	27 9a       	sbi	0x04, 7	; 4
//DDRB |=(1<<PB1); // for led
DDRD &= ~(1<<PD2); // clear bit
  a2:	52 98       	cbi	0x0a, 2	; 10
PORTD |= (1<<PD2); // set bit
  a4:	5a 9a       	sbi	0x0b, 2	; 11
//EICRA &= ~(1<<ISC01);
//EICRA|=(1<<ISC00)|(1<<ISC01);
//EIMSK |= (1<<INT0)|(1<<INT1);;
//sei();

}
  a6:	08 95       	ret

000000a8 <InitADC>:
void InitADC(){
ADMUX = (1<<REFS0);
  a8:	80 e4       	ldi	r24, 0x40	; 64
  aa:	80 93 7c 00 	sts	0x007C, r24
//ADMUX = 0x40;
ADCSRA = (1<<ADEN)|(7<<ADPS0);
  ae:	87 e8       	ldi	r24, 0x87	; 135
  b0:	80 93 7a 00 	sts	0x007A, r24
}
  b4:	08 95       	ret

000000b6 <ReadADC>:

uint16_t ReadADC(uint8_t ch){
ADMUX&= 0xf8;
  b6:	90 91 7c 00 	lds	r25, 0x007C
  ba:	98 7f       	andi	r25, 0xF8	; 248
  bc:	90 93 7c 00 	sts	0x007C, r25
ch= ch&0b00000111;
ADMUX|=ch;
  c0:	90 91 7c 00 	lds	r25, 0x007C
  c4:	87 70       	andi	r24, 0x07	; 7
  c6:	89 2b       	or	r24, r25
  c8:	80 93 7c 00 	sts	0x007C, r24
ADCSRA|=(1<<ADSC);
  cc:	80 91 7a 00 	lds	r24, 0x007A
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 93 7a 00 	sts	0x007A, r24

while(!(ADCSRA & (1<<ADIF)));
  d6:	80 91 7a 00 	lds	r24, 0x007A
  da:	84 ff       	sbrs	r24, 4
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <ReadADC+0x20>
ADCSRA|=(1<<ADIF);
  de:	80 91 7a 00 	lds	r24, 0x007A
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	80 93 7a 00 	sts	0x007A, r24
return(ADC);
  e8:	20 91 78 00 	lds	r18, 0x0078
  ec:	30 91 79 00 	lds	r19, 0x0079



}
  f0:	c9 01       	movw	r24, r18
  f2:	08 95       	ret

000000f4 <main>:
#include "Activity.h"
unsigned volatile FLAG1= 0;
//unsigned volatile FLAG2= 0;
//unsigned volatile overflow;
int main(void)
{   //pwm generation
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
    port();
 100:	0e 94 50 00 	call	0xa0	; 0xa0 <port>
    InitADC();
 104:	0e 94 54 00 	call	0xa8	; 0xa8 <InitADC>
    PWM();
 108:	0e 94 48 00 	call	0x90	; 0x90 <PWM>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 10c:	c0 e9       	ldi	r28, 0x90	; 144
 10e:	d1 e0       	ldi	r29, 0x01	; 1
                else if(ADC_value<=700){
                    OCR0A =180;

                }
                else{
                    OCR0A =250;
 110:	1a ef       	ldi	r17, 0xFA	; 250
                else if(ADC_value<=500){
                    OCR0A =110;

                }
                else if(ADC_value<=700){
                    OCR0A =180;
 112:	04 eb       	ldi	r16, 0xB4	; 180
                if (ADC_value<=200){
                    OCR0A =60;

                }
                else if(ADC_value<=500){
                    OCR0A =110;
 114:	9e e6       	ldi	r25, 0x6E	; 110
 116:	f9 2e       	mov	r15, r25


                ADC_value = ReadADC(0); //ADC from C0
                _delay_ms(20);
                if (ADC_value<=200){
                    OCR0A =60;
 118:	8c e3       	ldi	r24, 0x3C	; 60
 11a:	e8 2e       	mov	r14, r24
    PWM();
    uint16_t ADC_value;
    while(1){

            //ADC input
        if((!(PIND&(1<<PIND2)))){
 11c:	4a 9b       	sbis	0x09, 2	; 9
 11e:	0e c0       	rjmp	.+28     	; 0x13c <main+0x48>
                  _delay_ms(20);

        }

        else{
            PORTB &= ~(1<<PB7);
 120:	2f 98       	cbi	0x05, 7	; 5
            OCR0A =0;
 122:	17 bc       	out	0x27, r1	; 39
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	ce 01       	movw	r24, r28
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x36>
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 132:	28 3c       	cpi	r18, 0xC8	; 200
 134:	31 05       	cpc	r19, r1
 136:	c1 f7       	brne	.-16     	; 0x128 <main+0x34>
    PWM();
    uint16_t ADC_value;
    while(1){

            //ADC input
        if((!(PIND&(1<<PIND2)))){
 138:	4a 99       	sbic	0x09, 2	; 9
 13a:	f2 cf       	rjmp	.-28     	; 0x120 <main+0x2c>
                PORTB |=(1<<PB7);
 13c:	2f 9a       	sbi	0x05, 7	; 5


                ADC_value = ReadADC(0); //ADC from C0
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 5b 00 	call	0xb6	; 0xb6 <ReadADC>
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	fe 01       	movw	r30, r28
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x56>
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	28 3c       	cpi	r18, 0xC8	; 200
 154:	31 05       	cpc	r19, r1
 156:	c1 f7       	brne	.-16     	; 0x148 <main+0x54>
                _delay_ms(20);
                if (ADC_value<=200){
 158:	89 3c       	cpi	r24, 0xC9	; 201
 15a:	91 05       	cpc	r25, r1
 15c:	80 f4       	brcc	.+32     	; 0x17e <main+0x8a>
                    OCR0A =60;
 15e:	e7 bc       	out	0x27, r14	; 39
                }
                else{
                    OCR0A =250;

                }
                  FLAG1=0;
 160:	10 92 01 01 	sts	0x0101, r1
 164:	10 92 00 01 	sts	0x0100, r1
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	ce 01       	movw	r24, r28
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x7a>
 172:	2f 5f       	subi	r18, 0xFF	; 255
 174:	3f 4f       	sbci	r19, 0xFF	; 255
 176:	28 3c       	cpi	r18, 0xC8	; 200
 178:	31 05       	cpc	r19, r1
 17a:	c1 f7       	brne	.-16     	; 0x16c <main+0x78>
 17c:	d3 cf       	rjmp	.-90     	; 0x124 <main+0x30>
                _delay_ms(20);
                if (ADC_value<=200){
                    OCR0A =60;

                }
                else if(ADC_value<=500){
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	85 3f       	cpi	r24, 0xF5	; 245
 182:	92 07       	cpc	r25, r18
 184:	10 f4       	brcc	.+4      	; 0x18a <main+0x96>
                    OCR0A =110;
 186:	f7 bc       	out	0x27, r15	; 39
 188:	eb cf       	rjmp	.-42     	; 0x160 <main+0x6c>

                }
                else if(ADC_value<=700){
 18a:	8d 5b       	subi	r24, 0xBD	; 189
 18c:	92 40       	sbci	r25, 0x02	; 2
 18e:	10 f4       	brcc	.+4      	; 0x194 <main+0xa0>
                    OCR0A =180;
 190:	07 bd       	out	0x27, r16	; 39
 192:	e6 cf       	rjmp	.-52     	; 0x160 <main+0x6c>

                }
                else{
                    OCR0A =250;
 194:	17 bd       	out	0x27, r17	; 39
 196:	e4 cf       	rjmp	.-56     	; 0x160 <main+0x6c>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
